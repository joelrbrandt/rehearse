package test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.uispec4j.Trigger;
import org.uispec4j.UISpecTestCase;
import org.uispec4j.Window;
import org.uispec4j.interception.MainClassAdapter;
import org.uispec4j.interception.WindowInterceptor;

import processing.app.EditorConsole;
import processing.app.debug.RunnerException;
import processing.app.syntax.JEditTextArea;
import antlr.TokenStreamException;
import edu.stanford.hci.helpmeout.HelpMeOut;
import edu.stanford.hci.helpmeout.HelpMeOutPreferences.Usage;
import edu.stanford.hci.processing.RehearseBase;
import edu.stanford.hci.processing.editor.RehearseEditor;

public class SeedDatabaseShiffman extends UISpecTestCase {
	private Window window;

	protected void setUp() throws Exception {
		setAdapter(new MainClassAdapter(RehearseBase.class, new String[0]));
		window = getMainWindow();
	}

	public void testAddSyntaxFixes() throws IOException, TokenStreamException {
		assertTrue(window != null);
		final RehearseEditor editor = (RehearseEditor)window.getAwtContainer();
		EditorConsole.setEditor(editor);
		HelpMeOut.getInstance().setUsage(Usage.QUERY_AND_SUBMIT);//change for a dryrun
		List<Fix> syntaxFixes = getShiffmansSyntaxFixes();
		for(Fix f:syntaxFixes) {
			JEditTextArea textarea = editor.getTextArea();
			textarea.setText(f.before);
			try {
				editor.getSketch().compile();
				System.out.println("sorry, messed up code still compiled. skipping.");
			} catch (RunnerException e) {
				//great, compilation broke as expected
				HelpMeOut.getInstance().processBroken(e.getMessage(),f.before);
				//if we have an error, then re-run so we save it correctly

				//and submit the fixed version
				HelpMeOut.getInstance().processNoError(f.after);
			}
		}
	}

	public void testAddRuntimeFixes() { //needs to be tested more - i think we have weird state in between fixes that needs to get trashed.
		assertTrue(window != null);
		final RehearseEditor editor = (RehearseEditor)window.getAwtContainer();
		EditorConsole.setEditor(editor);
		HelpMeOut.getInstance().setUsage(Usage.QUERY_AND_SUBMIT);//change for a dryrun
		List<Fix> runtimeFixes = getShiffmansRuntimeFixes();
		for(Fix f:runtimeFixes) {
			JEditTextArea textarea = editor.getTextArea();
			textarea.setText(f.before);
			
			Window w = WindowInterceptor.run(new Trigger() {
				public void run() {
					editor.handleInteractiveRun();
				}
			});
			textarea.setText(f.after);
			w = WindowInterceptor.run(new Trigger() {
				public void run() {
					editor.handleInteractiveRun();
				}
			});
		}
		
		
	}
	private class Fix {
		public String before;
		public String after;
		public Fix(String before, String after) {
			this.before=before;
			this.after =after;
		}
	}
	private List<Fix> getShiffmansSyntaxFixes() {
		List<Fix> fixes = new ArrayList<Fix>();
		//autogenerated by shiffmans_examples.py
		fixes.add(new Fix("\nvoid setup() {\n	int val=5\n}\n","\nvoid setup() {\n	int val=5;\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  if (x<5 {\n    ellipse(0,0,10,10);\n  }\n}\n","\nvoid setup() {\n  if (x<5) {\n    ellipse(0,0,10,10);\n  }\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  for (int i=0, i<5, i++) {\n    println(i);\n  }\n}\n","\nvoid setup() {\n  for (int i=0; i<5; i++) {\n    println(i);\n  }\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  for(int i=0; i<10; i++) {\n    if(i<5) {\n      line(0,i,i,0);\n      println(\"i is greater than 5\");\n  }\n}\n","\nvoid setup() {\n  for(int i=0; i<10; i++) {\n    if(i<5) {\n      line(0,i,i,0);\n      println(\"i is greater than 5\");\n    }\n  }\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  myVar = 10;\n}\n","\nvoid setup() {\n  int myVar = 10;\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  if(mousePressed) {\n    int myVar = 10;\n  }\n  ellipse(myVar,10,10,10);\n}\n","\nvoid setup() {\n  int myVar = 0;\n  if(mousePressed) {\n    myVar = 10;\n  }\n  ellipse(myVar,10,10,10);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  int myVar = 10;\n}\nvoid draw() {\n  ellipse(myVar,10,10,10);\n}\n","\nint myVar = 0;\nvoid setup() {\n  myVar = 10;\n}\nvoid draw() {\n  ellipse(myVar,10,10,10);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  myVar[0] = 10;\n}\n","\nvoid setup() {\n  int myVar[] = new int[5];\n  myVar[0] = 10;\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  int myVar;\n  line(0, myVar, 0, 0);\n}\n","\nvoid setup() {\n  int myVar = 10;\n  line(0, myVar, 0, 0);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  int [] myArray;\n  myArray[0] = 10;\n}\n","\nvoid setup() {\n  int [] myArray = new int[3];\n  myArray[0] = 10;\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  intt myVar = 10;\n}\n","\nvoid setup() {\n  int myVar = 10;\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  Thing myThing = new Thing();\n}\n","\nclass Thing {\n  Thing(){}\n}\nvoid setup() {\n  Thing myThing = new Thing();\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  Capture video = new Capture(this,320,240,30);\n}\n","\nimport processing.video.*;\nvoid setup() {\n  Capture video = new Capture(this,320,240,30);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  ellipse(100,100,50);\n}\n","\nvoid setup() {\n  ellipse(100,100,50,50);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  ellipse(100,100,50,\"Wrong type of argument\");\n}\n","\nvoid setup() {\n  ellipse(100,100,50,50);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  elipse(100,100,50,50);\n}\n","\nvoid setup() {\n  ellipse(100,100,50,50);\n}\n"));
		fixes.add(new Fix("\nvoid setup() {\n  functionCompletelyMadeUp();\n}\n","\nvoid setup() {\n  myFunction();\n}\nvoid myFunction(){}\n"));
		fixes.add(new Fix("\nimport processing.video.*;\nvoid setup() {\n  Capture video = new Capture (this,320,240,30);\n  video.turnPurple();\n}\n","\nimport processing.video.*;\nvoid setup() {\n  Capture video = new Capture (this,320,240,30);\n  //video.turnPurple(); turn purple doesn't exist\n}\n"));
		return fixes;
	}
	private List<Fix> getShiffmansRuntimeFixes() {
		List<Fix> fixes = new ArrayList<Fix>();
		//this is still problematic - we are only saving 5 or 7 or these.
		fixes.add(new Fix("\nint [] myArray = new int[10];\nvoid setup() {\n  myArray[-1]=0;\n}\n","\nint [] myArray = new int[10];\nvoid setup() {\n  myArray[1]=0;\n}\n"));
		fixes.add(new Fix("\nint [] myArray = new int[10];\nvoid setup() {\n  myArray[10]=0;\n}\n","\nint [] myArray = new int[10];\nvoid setup() {\n  myArray[9]=0; //int[10] goes from 0..9\n}\n"));
		fixes.add(new Fix("\nint[] myArray = new int[100];\nvoid setup(){}\nvoid draw(){\n  myArray[mouseX] = 0;\n}\n","\nint[] myArray = new int[100];\nvoid setup(){}\nvoid draw(){\n  int index = constrain(mouseX,0,myArray.length-1);\n  myArray[index] = 0;\n}\n"));
		fixes.add(new Fix("\nint[] myArray = new int[100];\nvoid setup(){\n  for(int i=0; i<200; i++) {\n    myArray[i] = 0;\n  }\n}\n","\nint[] myArray = new int[100];\nvoid setup(){\n  for(int i=0; i<myArray.length; i++) {\n    myArray[i] = 0;\n  }\n}\n"));
		fixes.add(new Fix("\nint[] myArray = new int[100];\nvoid setup(){\n  for(int i=0; i<200; i++) {\n    myArray[i] = 0;\n  }\n}\n","\nint[] myArray = new int[100];\nvoid setup(){\n  for(int i=0; i<200; i++) {\n    if(i<myArray.length) {\n      myArray[i] = 0;\n    }\n  }\n}\n"));
		fixes.add(new Fix("\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing thing;\nvoid setup() {\n}\nvoid draw() {\n  thing.display();\n}\n","\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing thing;\nvoid setup() {\n  thing = new Thing();\n}\nvoid draw() {\n  thing.display();\n}\n"));
		fixes.add(new Fix("\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing thing;\nvoid setup() {\n  Thing thing = new Thing();\n}\nvoid draw() {\n  thing.display();\n}\n","\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing thing;\nvoid setup() {\n  thing = new Thing();\n}\nvoid draw() {\n  thing.display();\n}\n"));
		fixes.add(new Fix("\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing[] things = new Thing[10];\nvoid setup(){\n}\nvoid draw(){\n  for (int i=0; i<10; i++) {\n    things[i].display();\n  }\n}\n","\nclass Thing {\n  public Thing() { super(); }\n  public void display(){}\n}\nThing[] things = new Thing[10];\nvoid setup(){\n  for (int i=0; i<10; i++) {\n    things[i] = new Thing();\n  }\n}\nvoid draw(){\n  for (int i=0; i<10; i++) {\n    things[i].display();\n  }\n}\n"));
		fixes.add(new Fix("\nint [] myArray;\nvoid setup() {\n  myArray[0] = 5;\n}\n","\nint [] myArray = new int[3];\nvoid setup() {\n  myArray[0] = 5;\n}\n"));
		return fixes;
	}


}
