<%
import os,sys
os.environ['HOME'] = '/project/helpmeout-www/images'

import matplotlib
# chose a non-GUI backend
matplotlib.use( 'Agg' )
from pysqlite2 import dbapi2 as sqlite
from collections import defaultdict

#how many queries were answered?
  
con = sqlite.connect("/project/helpmeout-server/db/helpmeout.sqlite")

#count total queries, queries that returned something, queries that returned nothing
res = con.execute("select count(*) from querylog")
totalqueries = [r[0] for r in res][0]
res= con.execute("select count(*) as count from querylog left join fixidlog on querylog.id=fixidlog.log_id where fixidlog.log_id is null")
badqueries = [r[0] for r in res][0] 
res= con.execute("select count(distinct querylog.id) from querylog, fixidlog where querylog.id=fixidlog.log_id")
goodqueries = [r[0] for r in res][0]

#number of fixes returned with each query
res = con.execute("select fixes, sum(fixes) from (select count(*) as fixes from querylog join fixidlog on fixidlog.log_id=querylog.id group by querylog.id) group by fixes;")
res = [r for r in res]
fixes = [r[0] for r in res]
fixcounts = [r[1] for r in res]

#number of fixes returned with each query per day
res = con.execute("select time, fixes, sum(fixes) from (select strftime('%Y-%m-%d',querylog.timestamp) as time, count(*) as fixes from querylog, fixidlog where fixidlog.log_id=querylog.id group by querylog.id) group by time, fixes;")
fixdict = {}
for r in res:
  fixdict.setdefault(r[0],[]).append([r[1],r[2]])

# number of fixes submitted per day (compiletime and runtime)
res = con.execute("select strftime('%Y-%m-%d',timestamp) as time, count(id) from compilererrors group by time;")
compilersubmissions = [r for r in res]
res = con.execute("select strftime('%Y-%m-%d',timestamp) as time, count(id) from exceptions group by time;")
runtimesubmissions = [r for r in res]
# fixsubmits {date: [compile_fixes_submitted, runtime_fixes_submitted], ...}
fixsubmits = {}
for c in compilersubmissions:
  fixsubmits.setdefault(c[0],[0,0])[0] += c[1]
for r in runtimesubmissions:
  fixsubmits.setdefault(r[0],[0,0])[1] += r[1]

# count compile-time error query counts vs runtime error query counts
res = con.execute("select count(type) from querylog group by type order by type asc")
typecounts = [r for r in res]

# count error messages in queries
res = con.execute("select count(*) as count,error from querylog group by error order by count asc")
res = [r for r in res]
counts = [r[0] for r in res]
msgs = [r[1] for r in res]


# count error messages in fixes
fres = con.execute("select count(*) as count, errmsg from compilererrors group by errmsg order by count desc limit 25")
fres = [r for r in fres]
fcounts = [r[0] for r in fres]
fmsgs = [r[1] for r in fres]


from pylab import *

#fixes = [badqueries, onereturned, tworeturned, threereturned]
clf()
figure(figsize=(3, 2))
pos = arange(len(fixcounts))+.5
axes([0.1,0.25,0.85,0.5])
barh(pos, fixcounts, align='center')
yticks(pos, fixes)
xlabel('queries returned')
grid(True)
savefig("/project/helpmeout-www/images/fixesperquery.png", dpi=80)

#get max limit
lims = []
for key,val in fixdict.iteritems():
  x = [v[1] for v in val]
  lims.append(max(x))
maxx = max(lims)

for date,val in fixdict.iteritems():
  x = [v[1] for v in val]
  y = [v[0] for v in val]
  clf()
  figure(figsize=(1.5,2))
  pos = arange(len(y))
  axes([0.1,0.25,0.85,0.5])
  barh(pos,x,align='center')
  yticks(pos,y)
  xlim(xmax=maxx)
  title(date)
  grid(True)
  savefig("/project/helpmeout-www/images/fixes_"+str(date)+'.png',dpi=80)

# fixes submitted per day
#get max limit
lims = []
for key,val in fixsubmits.iteritems():
  lims.append(max(val))
maxx = max(lims)

for date, pair in fixsubmits.iteritems():
  fixsubmitcounts = [pair[0], pair[1]]
  clf()
  figure(figsize=(2.5,1))
  pos = arange(len(fixsubmitcounts))
  axes([0.22,0.25,0.75,0.5])
  barh(pos, fixsubmitcounts, align="center")
  yticks(pos,['compiler','runtime'],fontsize=8)
  xlim(xmax=maxx)
  title(date)
  grid(True)
  savefig("/project/helpmeout-www/images/fixsubmits_"+str(date)+".png",dpi=80)


# error queries by error message
clf()
figure(figsize=(8,6))
axes([.66,0.1,0.27,0.8])
pos = arange(len(msgs))+.5
barh(pos,counts, align='center')
yticks(pos,msgs,fontsize=8)
xlabel('times queried')
title('error queries by error message')
grid(True)
savefig("/project/helpmeout-www/images/queryhbar.png",dpi=80)

clf()
figure(figsize=(7.5,7))
fmsgs.reverse()
fcounts.reverse()
axes([0.7,0.1,0.29,0.8])
pos = arange(len(fmsgs))+.5
barh(pos,fcounts, align='center')
yticks(pos,fmsgs,fontsize=8)
xlabel('times queried')
title('fixes by error message')
grid(True)
savefig("/project/helpmeout-www/images/fixhbar.png",dpi=80)


clf()
figure(figsize=(3.5,3.5))
ax = axes([0.1, 0.1, 0.8, 0.8])
pie([goodqueries,badqueries],labels=["Successful","Unsuccessful"],colors=['g','r'])
savefig("/project/helpmeout-www/images/queryreturns.png")

clf()
figure(figsize=(3.5,3.5))
pie(typecounts,labels=["Compile-time","Runtime"],colors=['b','y'])
savefig("/project/helpmeout-www/images/querytypes.png")
%>

<%--HTML starts here--%>

<%@ include file="header.html"%>
<style type="text/css">
        h1 {font-family:Arial}
        h2 {font-family:Arial}
        p  {font-family:Arial}
        table {font-size:80%; border:1px solid; 
border-collapse:collapse;}
	.minigraphs {border:none;}
	.minigraphs td {padding: 20px;}
        </style>

<h1>some helpmeout statistics</h1>

<table style="border:none;">
  <tr>
    <td>
      <h2>successful & unsuccessful queries</h2>
      <table border="1">
      <tr bgcolor="#cccccc"><td>successful</td><td>unsuccessful</td><td>total</td></tr>
      <tr>
      <td><%=goodqueries%></td><td><%=badqueries%></td><td><%=totalqueries%></td>
      </tr>
      </table>
      <img src="images/queryreturns.png"/>
    </td>
    <td>
      <h2>queries by type</h2>
      <table border="1">
      <tr bgcolor="#cccccc"><td>compile-time</td><td>runtime</td></tr>
      <tr>
      <td><%=typecounts[0][0]%></td>
      <td><%=typecounts[1][0]%></td>
      </tr></table>
      <img src="images/querytypes.png"/>
    </td>
  </tr>
</table>
<h2>number of fixes returned per query</h2>
<table border="1">
<tr bgcolor="#cccccc"><td>3</td><td>2</td><td>1</td></tr>
<tr>
<td><%=fixcounts[2]%></td><td><%=fixcounts[1]%></td><td><%=fixcounts[0]%></td>
</tr>
</table>
<img src="images/fixesperquery.png"/>
<table class="minigraphs">
  <tr>
<%
dates = fixdict.keys()
dates.sort()
for date in dates:
%>
  <td>
    <img src="images/fixes_<%=str(date)%>.png"/>
  </td>
<%
%>
  </tr>
</table>
<h2>fixes submitted per day</h2>
<table class="minigraphs">
<%
dates = fixsubmits.keys()
dates.sort()
rowcounter = 0
for date in dates:
  if rowcounter is 0:
%>
  <tr>
<%
  
%>
    <td>
      <img src="images/fixsubmits_<%=date%>.png"/>
    </td>
<%
  if rowcounter is 2:
%>
  </tr>
<%
  
  rowcounter = (rowcounter+1)%3
%>
<%
%>
</table>
<h2>error messages in queries</h2>
<img src="images/queryhbar.png"/><br>
<%--"<br>".join([str(r[0])+'-'+r[1] for r in res])--%>
<h2>error messages in fixes (top 25)</h2>
<img src="images/fixhbar.png"/><br>
 
<%@ include file="footer.html"%>
